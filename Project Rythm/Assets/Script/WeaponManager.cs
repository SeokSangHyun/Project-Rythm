using System.Collections.Generic;using System.Linq;using UnityEngine;public class WeaponManager : MonoBehaviour{    //�̱���ȭ    public static WeaponManager Instance { get; private set; }    //�ش� Ŭ���� ������    private Dictionary<EnumWeapon, WeaponObjectClass> list_myWeapon = new Dictionary<EnumWeapon, WeaponObjectClass>();    //----------------------------------------------------------------------------------------------------    void Awake()    {        // �̱��� �ʱ�ȭ        if (Instance != null && Instance != this)        {            Destroy(gameObject); // ���� �ν��Ͻ��� ������ ���� ������ ���� �ı�            return;        }        Instance = this;        // �̱����� �ı����� �ʵ��� ����        DontDestroyOnLoad(gameObject);    }    void Start()    {        StaticWeaponList.WeaponDataLoad();    }    // Update is called once per frame    void Update(){}        //������ ���� ����    public void InvokeEquipItem_Node()    {        foreach ( KeyValuePair<EnumWeapon, WeaponObjectClass> pair in list_myWeapon)        {            //pair.Value.Node.GetComponent<INodeActionClass>().Invoke();        }    }            //----------------------------------------------------------------------------------------------------    // 장착 / 해제    //----------------------------------------------------------------------------------------------------        //장착 무기 초기화    public void InitItem()    {        list_myWeapon.Clear();                EnumWeapon e_weapon         = EnumWeapon.Test;        WeaponObjectClass weapon_script    = StaticWeaponList.GetWeapon(e_weapon).GetComponent<WeaponObjectClass>();        list_myWeapon.Add(e_weapon, weapon_script);    }        // 무기 창착 함수    public void EquipItem(EnumWeapon e_weapon)    {        WeaponObjectClass weapon_script    = StaticWeaponList.GetWeapon(e_weapon).GetComponent<WeaponObjectClass>();        list_myWeapon.Add(e_weapon, weapon_script);    }    // 무기 창착 해제 함수    public void unEquipItem(EnumWeapon e_weapon)    {        //무기를 가지고 있지 않다면 무기를 해제하지 않음        if ( !list_myWeapon.ContainsKey(e_weapon) )        {            print("�ش� ���⸦ �������� �ʾҽ��ϴ�.");            return;        }                list_myWeapon.Remove(e_weapon);    }            //----------------------------------------------------------------------------------------------------    // 노드 배치 함수    //----------------------------------------------------------------------------------------------------    public void InitializeBeatSetting()    {        // 1. 일단 WeaponObjectClass에서 무기, 노드 정보를 모두(list) 얻어옴        // 2. 비트의 전체 크기를 구해야함        //          ㄴ 전체 길이 = [무기 비트 총합] * D[난이도 계수] -> (1 비트 + 비트 사이 나누는 수(2))의 배수        //              ㄴ 무기 비트 중에 중간이 비어 있는게 있을 경우? (o|oo , o|o|o ...)        //              ㄴ 무기 비트 총합을 구할 때 비어 있는 것과 실제 있는 것을 구별        //              ㄴ 비트 타입으로 모양을 구별함 -> 실질 모양은 알아서 구별해야함 -> 타입에 따라서 알아서 반환해주는 함수 추가 필요        //          ㄴ 빈 비트의 수 = [전체 길이 - [무기 비트 총합]        //          ㄴ 비트를 모은 리스트        // 3. 배치되는 노드의 알고리즘        //          ㄴ 비트 일지 . 빈 비트 일지 확률 검사 -> 전체 비트 배열 채우기        //          ㄴ 비트와 빈 비트에 남은 수가 없으면 배열 끝        //        // 난이도가 필요함 = 난이도는 몬스터가 가지고 있고 비트가 많을수록 난이도가 올라감        // 따라서 난이도에 따라서 빈 노드의 수가 적어짐        //        //list_myWeapon;                int total_length = 0;        int empty_cnt = 0;        int full_cnt = 0;        var keys = list_myWeapon.Keys.ToList();        var values = list_myWeapon.Values.ToList();                for(int i = 0; i < list_myWeapon.Count; ++i)        {            var temp = values[i];        }    }    }